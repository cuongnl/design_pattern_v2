1) factory pattern là gì:
	- là 1 design pattern 
	- quản lý và trả về các đối tượng thao yêu cầu
	- giúp khởi tạo đối tượng 1 cách linh hoạt
	- sử dụng interface làm kiểu dữ liệu của đối tượng --> linh hoạt
	- khi có 1 class cha(super-class) với nhiều class con (sub-class), dựa trên đầu vào và trả ra 1 trong những class đó
2) factory bao gồm các thành phần sau
	- super class: một supper class có thể là 1 interface. abstract class hoặc class thông tường
	- sub class: các sub class sé implement các phương thức của super class theo nghiệp vụ riêng của nó
	- factory class: 1 class chịu trách nhiệm khởi tạo các đối tượng sub class dựa theo param đầu vào.
		lớp này là 1 singleton hoặc cung cấp 1 public status method cho việc truy xuất và khởi tạo đối tượng.
		Sử dụng if-else, switch-case để xác định class con làm đầu ra
	- minh họa factory pattern cho bank 
	
					-----------------------------------------------------------------	            ---------------------------------
					|	------------------------            ---------------------	|				| Class client					|
					|	| Interface Bank	   |			| Class TPBank		|	|				|-------------------------------|
					|	| ---------------------|			|-------------------|	|				| void main(){					|		
					|	| String getBank()	   |------------| String getBank()	|	|				|	Bank bank = BankFactory(1)	|		|
					|	|					   |			|					|	|				|								|
					|	------------------------			---------------------	|				---------------------------------
					|					|											|
					|					|				---------------------		|				-------------------------------------------------
					|					|---------------| Class VietcomBank	|		|				| 				Class bankFactory 				|			
					|									|-------------------|		|				|-----------------------------------------------|		
					|									| String getBank()	| 		|				|  public static Bank getBank(type bankType){	|
					|									|					|		|				|  												|
					|									---------------------		|				|		if(bankType == 0){						|
					|																|				|			return new TPBank()					|
					-----------------------------------------------------------------				|		}else{									|				
																									|			return new VietcomBank()			|
																									|		}										|
																									-------------------------------------------------
																									
3) Sử dụng khi náo
	- có nhiều sub-class có điểm chung 
	- muốn loại bỏ phần nào sự phụ thuộc của toán tử new 
	- đưa việc khởi tạo 1 lớp từ phân tán sang tập trung --> bảo trì
	- không biết cần đến những lớp con nào nữa --> sử dụng factory để rẽ bảo trì
4) Lợi ích của factory pattern
	- giảm sự phụ thuộc giữa các module(sử dụng new, class cấp cao sẽ bị phụ thuộc bởi class cấp thấp)
	- hướng tiếp cận lỏng lẻo runtime, sử dụng interface theo implement
	- giúp trương trình độc lâp với những lớp cụ thể mà chúng ta cânf tạo 1 đối tượng
	- không bị ảnh hưởng tới những phâng source khác vì ta đang đống gói và thay đổi trong khối factory
	- mở rộng code dễ dàng hơn, chỉ việc tạo thêm subClass, implement interface và thêm logic vào factory
	
5) Ví dụ có thể áp dụng
   - vận chuyển hàng hóa logistíc bằng đường biển, sông, bộ,...
   - các ngân hàng